{
  "nombre": "Desarrollador Backend - Node.js/Express",
  "version": "1.0",
  "descripcion": "Prompts especializados para desarrollo backend con Node.js, Express y mejores pr√°cticas",
  "prompts": [
    {
      "id": "backend_analyze_requirements",
      "nombre": "Analizar Requisitos Backend",
      "prompt": "Analiza los requisitos de user stories y crea un plan de desarrollo backend que incluya:\n\n## üèóÔ∏è ARQUITECTURA DE API\n[Estructura de endpoints y servicios]\n\n## üóÑÔ∏è MODELOS DE DATOS\n[Esquemas de base de datos y relaciones]\n\n## üîê AUTENTICACI√ìN Y AUTORIZACI√ìN\n[Sistema de seguridad y permisos]\n\n## üì° INTEGRACIONES EXTERNAS\n[APIs de terceros y servicios]\n\n## üöÄ DESPLIEGUE Y DEVOPS\n[Configuraci√≥n de producci√≥n]\n\n## üìä MONITOREO Y LOGS\n[Sistema de observabilidad]",
      "contexto": "An√°lisis de requisitos para desarrollo backend"
    },
    {
      "id": "backend_create_api_endpoints",
      "nombre": "Crear Endpoints de API",
      "prompt": "Crea endpoints de API RESTful con Express.js siguiendo estas mejores pr√°cticas:\n\n- Estructura de carpetas organizada\n- Middleware de autenticaci√≥n\n- Validaci√≥n de datos con Joi/Zod\n- Manejo de errores centralizado\n- Logging estructurado\n- Rate limiting\n- CORS configuration\n- Documentaci√≥n con Swagger\n- Testing con Jest/Supertest\n\nIncluye ejemplos de c√≥digo completos con manejo de errores.",
      "contexto": "Desarrollo de APIs REST"
    },
    {
      "id": "backend_database_design",
      "nombre": "Dise√±o de Base de Datos",
      "prompt": "Dise√±a la estructura de base de datos considerando:\n\n- **Modelos de datos**: Entidades y relaciones\n- **√çndices**: Para optimizaci√≥n de consultas\n- **Migraciones**: Control de versiones de esquema\n- **Seeding**: Datos iniciales y de prueba\n- **Backup**: Estrategias de respaldo\n- **Escalabilidad**: Particionado y sharding\n- **Seguridad**: Encriptaci√≥n y permisos\n\nProporciona esquemas SQL y diagramas de relaciones.",
      "contexto": "Dise√±o de base de datos"
    },
    {
      "id": "backend_authentication_security",
      "nombre": "Autenticaci√≥n y Seguridad",
      "prompt": "Implementa sistema de autenticaci√≥n y seguridad incluyendo:\n\n- **JWT Tokens**: Generaci√≥n y validaci√≥n\n- **Password Hashing**: bcrypt con salt\n- **Rate Limiting**: Protecci√≥n contra ataques\n- **Input Validation**: Sanitizaci√≥n de datos\n- **CORS**: Configuraci√≥n de or√≠genes\n- **Helmet**: Headers de seguridad\n- **Session Management**: Manejo de sesiones\n- **OAuth**: Integraci√≥n con proveedores\n\nIncluye middleware de seguridad y ejemplos de implementaci√≥n.",
      "contexto": "Seguridad en APIs"
    },
    {
      "id": "backend_testing_strategy",
      "nombre": "Estrategia de Testing",
      "prompt": "Dise√±a una estrategia de testing completa para el backend:\n\n- **Unit Tests**: Funciones y m√©todos individuales\n- **Integration Tests**: APIs y base de datos\n- **E2E Tests**: Flujos completos de usuario\n- **Load Testing**: Rendimiento bajo carga\n- **Security Testing**: Vulnerabilidades\n- **Mocking**: Servicios externos\n- **Coverage**: Cobertura de c√≥digo\n- **CI/CD**: Automatizaci√≥n de tests\n\nProporciona configuraci√≥n de testing y ejemplos de casos de prueba.",
      "contexto": "Testing de aplicaciones backend"
    }
  ],
  "configuracion": {
    "framework": "Node.js + Express",
    "lenguaje": "JavaScript/TypeScript",
    "base_datos": "MongoDB/PostgreSQL",
    "testing": "Jest + Supertest"
  }
}













